syntax = "proto3";

package clientInterface;

service Client {
  rpc Echo(EchoMessage) returns (EchoMessage) {};

  // Nodes
  rpc NodesList(EmptyMessage) returns (stream NodeMessage) {};
  //TODO: These are placeholder. subject to change.
  rpc NodesGetLocalInfo(EmptyMessage) returns (NodeInfoMessage) {};
  rpc NodesUpdateLocalInfo(NodeInfoMessage) returns (EmptyMessage) {};
  rpc NodesGetInfo(NodeMessage) returns (NodeInfoMessage) {};
  rpc NodesUpdateInfo(EmptyMessage) returns (EmptyMessage) {}; //WIP
  rpc NodesPing(NodeMessage) returns (StatusMessage) {};
  rpc NodesAdd(EmptyMessage) returns (EmptyMessage) {}; //WIP
  rpc NodesFind(NodeMessage) returns (EmptyMessage) {};

  // Keys
  rpc KeysRootKeyPair (EmptyMessage) returns (KeyPairMessage) {};
  rpc KeysResetKeyPair (KeyMessage) returns (EmptyMessage) {};
  rpc KeysRenewKeyPair (KeyMessage) returns (EmptyMessage) {};
  rpc KeysEncrypt (CryptoMessage) returns (CryptoMessage) {};
  rpc KeysDecrypt (CryptoMessage) returns (CryptoMessage) {};
  rpc KeysSign (CryptoMessage) returns (CryptoMessage) {};
  rpc KeysVerify (CryptoMessage) returns (StatusMessage) {};
  rpc KeysChangePassword (PasswordMessage) returns (EmptyMessage) {};
  rpc CertsGet (EmptyMessage) returns (CertificateMessage) {};
  rpc CertsChainGet (EmptyMessage) returns (stream CertificateMessage) {};

  // Vaults
  rpc VaultsList(EmptyMessage) returns (stream VaultMessage) {};
  rpc VaultsCreate(VaultMessage) returns (StatusMessage) {};
  rpc VaultsRename(VaultMessage) returns (StatusMessage) {};
  rpc VaultsDelete(VaultMessage) returns (StatusMessage) {};
  rpc VaultsListSecrets(VaultMessage) returns (stream SecretMessage) {};
  rpc VaultsMkdir(VaultSpecificMessage) returns (EmptyMessage) {};
  rpc VaultsStat(VaultMessage) returns (StatMessage) {};
  rpc VaultsPull(VaultMessage) returns (EmptyMessage) {};
  rpc VaultsScan(NodeMessage) returns (stream VaultMessage) {};
  rpc VaultsDeleteSecret(VaultSpecificMessage) returns (StatusMessage) {};
  rpc VaultsEditSecret(SecretSpecificMessage) returns (EmptyMessage) {};
  rpc VaultsGetSecret(VaultSpecificMessage) returns (SecretMessage) {};
  rpc VaultsRenameSecret(SecretRenameMessage) returns (StatusMessage) {};
  rpc VaultsNewSecret(SecretNewMessage) returns (StatusMessage) {};
  rpc VaultsNewDirSecret(SecretNewMessage) returns (EmptyMessage) {};

  // Identities
  rpc IdentitiesAuthenticate(ProviderMessage) returns (ProviderMessage) {};
  rpc TokensPut(TokenSpecificMessage) returns (EmptyMessage) {};
  rpc TokensGet(ProviderMessage) returns (TokenMessage) {};
  rpc TokensDelete(ProviderMessage) returns (EmptyMessage) {};
  rpc ProvidersGet(EmptyMessage) returns (ProviderMessage) {};

  // Gestalts
  rpc GestaltsGetNode(GestaltMessage) returns (GestaltMessage) {};
  rpc GestaltsGetIdentity(ProviderMessage) returns (GestaltMessage) {};
  rpc GestaltsList(EmptyMessage) returns (stream GestaltMessage) {};
  rpc GestaltsSetNode(GestaltTrustMessage) returns (EmptyMessage) {};
  rpc GestaltsSetIdentity(GestaltTrustMessage) returns (EmptyMessage) {};

  rpc GestaltSync(stream GestaltMessage) returns (stream GestaltMessage) {};
}

message EmptyMessage {}

message StatusMessage {
  bool success = 1;
}

message EchoMessage {
  string challenge = 1;
}

// Vaults

message VaultMessage {
  string name = 1;
  string id = 2;
}

message VaultSpecificMessage {
  VaultMessage vault = 1;
  string name = 2;
}

message SecretSpecificMessage {
  VaultSpecificMessage vault = 1;
  string content = 2;
}

message SecretRenameMessage {
  VaultMessage vault = 1;
  SecretMessage oldName = 2;
  SecretMessage newName = 3;
}

message SecretNewMessage {
  VaultMessage vault = 1;
  string name = 2;
  string content = 3;
}

message SecretMessage {
  string name = 1;
}

message StatMessage {
  string stats = 1;
}

// Nodes

message NodeMessage {
  string name = 1;
}

//TODO: These are placeholder. subject to change.
message NodeInfoMessage {
  // This is a hash of the public key that uniquely identifies the node
  string node_id = 1;

  // This is keynode alias that is attached to each identity (x.509) certificate
  // oid: 1.3.1.4.1
  string alias = 2;

  // This is the public key that cryptographically identifies this keynode
  string public_key = 3;

  // The root public key is the crypto-identity that this keynode
  // is "crypto-link"-ed to. This is empty by default for keynodes
  // that do not belong to a heirarchy
  // oid: 1.3.1.4.2
  string root_public_key = 4;

  // This is the known address (e.g. '132.454.243.21:1314') on which the keynode can be found
  // oid: 1.3.1.4.3
  string node_address = 5;

  // This address is where the keynode's HTTP API is served
  // oid: 1.3.1.4.4
  string api_address = 6;

  // The LinkInfo list
  // oid: 1.3.1.4.5
  repeated LinkInfoIdentityMessage link_info = 7;

  // This is the original pem x.509 certificate that is signed
  // by the private key of the node
  string pem = 8;
} //May have to change structure of this.

message LinkInfoIdentityMessage {
  string type = 1;
  string node = 2;
  string identity = 3;
  string provider = 4;
  string dateIssued = 5;
  string signature = 6;
  string key = 7;
  string url = 8;
} //May have to change structure of this.

// Keys

message CryptoMessage {
  string data = 1;
  string signature = 2;
}

message KeyMessage {
  string name = 1;
  string key = 2;
}

message KeyPairMessage {
  string public = 1;
  string private = 2;
}

message CertificateMessage {
  string cert = 1;
}

message PasswordMessage {
  string password = 1;
}

// Identities

message ProviderMessage {
  string id = 1;
  string message = 2;
}

message TokenSpecificMessage {
  ProviderMessage provider = 1;
  string token = 2;
}

message TokenMessage {
  string token = 1;
}

// Gestalts

message GestaltMessage {
  string name = 1;
}

message GestaltTrustMessage {
  string provider = 1;
  string name = 2;
  bool set = 3;
}

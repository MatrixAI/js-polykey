syntax = "proto3";

package clientInterface;

service Client {
  rpc Echo(EchoMessage) returns (EchoMessage) {};

  // Agent
  rpc AgentStop(EmptyMessage) returns (EmptyMessage) {};

  // Session
  rpc SessionRequestJWT (EmptyMessage) returns (JWTTokenMessage) {};
  rpc SessionChangeKey (EmptyMessage) returns (StatusMessage) {};

  // Nodes
  rpc NodesList(EmptyMessage) returns (stream NodeMessage) {};

  // Keys
  rpc KeysRootKeyPair (EmptyMessage) returns (KeyPairMessage) {};
  rpc KeysResetKeyPair (KeyMessage) returns (EmptyMessage) {};
  rpc KeysRenewKeyPair (KeyMessage) returns (EmptyMessage) {};
  rpc KeysEncrypt (CryptoMessage) returns (CryptoMessage) {};
  rpc KeysDecrypt (CryptoMessage) returns (CryptoMessage) {};
  rpc KeysSign (CryptoMessage) returns (CryptoMessage) {};
  rpc KeysVerify (CryptoMessage) returns (StatusMessage) {};
  rpc KeysChangePassword (PasswordMessage) returns (EmptyMessage) {};
  rpc CertsGet (EmptyMessage) returns (CertificateMessage) {};
  rpc CertsChainGet (EmptyMessage) returns (stream CertificateMessage) {};

  // Vaults
  rpc VaultsList(EmptyMessage) returns (stream VaultMessage) {};
  rpc VaultsCreate(VaultMessage) returns (VaultMessage) {};
  rpc VaultsRename(VaultSpecificMessage) returns (VaultMessage) {};
  rpc VaultsDelete(VaultMessage) returns (StatusMessage) {};
  rpc VaultsListSecrets(VaultMessage) returns (stream SecretMessage) {};
  rpc VaultsMkdir(VaultSpecificMessage) returns (StatusMessage) {};
  rpc VaultsStat(VaultMessage) returns (StatMessage) {};
  rpc VaultsPull(VaultPullMessage) returns (StatusMessage) {};
  rpc VaultsScan(NodeMessage) returns (stream VaultMessage) {};
  rpc VaultsDeleteSecret(SecretMessage) returns (StatusMessage) {};
  rpc VaultsEditSecret(SecretEditMessage) returns (StatusMessage) {};
  rpc VaultsGetSecret(SecretMessage) returns (SecretMessage) {};
  rpc VaultsRenameSecret(SecretRenameMessage) returns (StatusMessage) {};
  rpc VaultsNewSecret(SecretMessage) returns (StatusMessage) {};
  rpc VaultsNewDirSecret(SecretSpecificMessage) returns (StatusMessage) {};
  rpc VaultsShare(ShareMessage) returns (EmptyMessage) {};
  rpc VaultsPermissions(ShareMessage) returns (stream PermissionMessage) {};

  // Identities
  rpc IdentitiesAuthenticate(ProviderMessage) returns (ProviderMessage) {};
  rpc TokensPut(TokenSpecificMessage) returns (EmptyMessage) {};
  rpc TokensGet(ProviderMessage) returns (TokenMessage) {};
  rpc TokensDelete(ProviderMessage) returns (EmptyMessage) {};
  rpc ProvidersGet(EmptyMessage) returns (ProviderMessage) {};

  // Gestalts
  rpc GestaltsGetNode(GestaltMessage) returns (GestaltMessage) {};
  rpc GestaltsGetIdentity(ProviderMessage) returns (GestaltMessage) {};
  rpc GestaltsList(EmptyMessage) returns (stream GestaltMessage) {};
  rpc GestaltsSetNode(GestaltTrustMessage) returns (EmptyMessage) {};
  rpc GestaltsSetIdentity(GestaltTrustMessage) returns (EmptyMessage) {};

  rpc GestaltSync(stream GestaltMessage) returns (stream GestaltMessage) {};
}

message EmptyMessage {}

message StatusMessage {
  bool success = 1;
}

message EchoMessage {
  string challenge = 1;
}

// Session

message JWTTokenMessage {
  string token = 1;
}

// Vaults

message VaultMessage {
  oneof name_or_id {
    string name = 1;
    string id = 2;
  }
}

message VaultSpecificMessage {
  required VaultMessage vault = 1;
  string name = 2;
}

message VaultPullMessage {
  required VaultMessage vault = 1;
  required NodeMessage node = 2;
}

message SecretRenameMessage {
  SecretMessage oldSecret = 1;
  string newName = 2;
}

message SecretMessage {
  VaultMessage vault = 1;
  string name = 2;
  string content = 3;
}

message SecretEditMessage {
  SecretMessage secret = 1;
  string content = 2;
}

message SecretSpecificMessage {
  SecretMessage vault = 1;
  string content = 2;
}

message StatMessage {
  string stats = 1;
}

message ShareMessage {
  string name = 1;
  string id = 2;
  bool set = 3;
}

message PermissionMessage {
  string id = 1;
  string action = 2;
}

// Nodes

message NodeMessage {
  string name = 1;
}

// Keys

message CryptoMessage {
  string data = 1;
  string signature = 2;
}

message KeyMessage {
  string name = 1;
  string key = 2;
}

message KeyPairMessage {
  string public = 1;
  string private = 2;
}

message CertificateMessage {
  string cert = 1;
}

message PasswordMessage {
  string password = 1;
}

// Identities

message ProviderMessage {
  string id = 1;
  string message = 2;
}

message TokenSpecificMessage {
  ProviderMessage provider = 1;
  string token = 2;
}

message TokenMessage {
  string token = 1;
}

// Gestalts

message GestaltMessage {
  string name = 1;
}

message GestaltTrustMessage {
  string provider = 1;
  string name = 2;
  bool set = 3;
}
